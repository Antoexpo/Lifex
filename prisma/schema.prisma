generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = env("DATABASE_PROVIDER", "sqlite")
  url      = env("DATABASE_URL", "file:./dev.db")
}

enum SubscriptionStatus {
  PENDING
  ACTIVE
  PAST_DUE
  SUSPENDED
}

enum TransactionType {
  COMMISSION
  ADJUSTMENT
  WITHDRAW
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  referralCode String @unique
  sponsorId Int?
  sponsor   User?    @relation("UserSponsor", fields: [sponsorId], references: [id])
  directSponsorships User[] @relation("UserSponsor")
  path      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  subscription Subscription?
  wallet     Wallet?
  commissions Commission[] @relation("CommissionUser")
  receivedCommissions Commission[] @relation("CommissionSource")
}

model Subscription {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  status    SubscriptionStatus @default(PENDING)
  expireAt  DateTime?
}

model Commission {
  id      Int @id @default(autoincrement())
  user    User @relation("CommissionUser", fields: [userId], references: [id])
  userId  Int
  source  User @relation("CommissionSource", fields: [sourceId], references: [id])
  sourceId Int
  level   Int
  amount  Float
  createdAt DateTime @default(now())
}

model Wallet {
  id      Int @id @default(autoincrement())
  user    User @relation(fields: [userId], references: [id])
  userId  Int @unique
  balance Float @default(0)
  transactions WalletTransaction[]
}

model WalletTransaction {
  id      Int @id @default(autoincrement())
  wallet  Wallet @relation(fields: [walletId], references: [id])
  walletId Int
  amount  Float
  type    TransactionType
  description String
  createdAt DateTime @default(now())
}
